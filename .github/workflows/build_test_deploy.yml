on:
  push:
    branches: [canary]
  pull_request:
    types: [opened, synchronize]

name: Build, test, and deploy

env:
  NAPI_CLI_VERSION: 2.14.7
  TURBO_VERSION: 1.6.3
  RUST_TOOLCHAIN: nightly-2022-11-04
  PNPM_VERSION: 7.24.3
  NODE_MAINTENANCE_VERSION: 16
  NODE_LTS_VERSION: 18

jobs:
  check-examples:
    name: Check examples
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install moreutils
        run: sudo apt install moreutils
      - name: Check examples
        run: ./scripts/check-examples.sh

  build:
    runs-on: ubuntu-latest
    env:
      NEXT_TELEMETRY_DISABLED: 1
      # is this still needed?
      NEXT_SKIP_NATIVE_POSTINSTALL: 1
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
    outputs:
      docsChange: ${{ steps.docs-change.outputs.DOCS_CHANGE }}
      isRelease: ${{ steps.check-release.outputs.IS_RELEASE }}
      turboToken: ${{ steps.turbo-token.outputs.TURBO_TOKEN }}
      weekNum: ${{ steps.get-week.outputs.WEEK }}
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ steps.docs-change.outputs.docsChange == 'nope' }}
        with:
          node-version: 16
          check-latest: true

      - uses: actions/checkout@v3
        with:
          fetch-depth: 25

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - name: Check non-docs only change
        run: echo "DOCS_CHANGE<<EOF" >> $GITHUB_OUTPUT; echo "$(node scripts/run-for-change.js --not --type docs --exec echo 'nope')" >> $GITHUB_OUTPUT; echo 'EOF' >> $GITHUB_OUTPUT
        id: docs-change

      - run: echo "${{steps.docs-change.outputs.DOCS_CHANGE}}"

      - run: echo "TURBO_TOKEN=$(echo ${TURBO_TOKEN:-empty})" >> $GITHUB_OUTPUT
        id: turbo-token

      - run: npm i -g pnpm@${PNPM_VERSION}

      - id: get-store-path
        run: echo STORE_PATH=$(pnpm store path) >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        timeout-minutes: 5
        id: cache-pnpm-store
        with:
          path: ${{ steps.get-store-path.outputs.STORE_PATH }}
          key: pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
            pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}

      - run: pnpm install

      - run: TEST_TIMINGS_TOKEN=${{ secrets.TEST_TIMINGS_TOKEN }} node run-tests.js --timings --write-timings -g 1/1
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE == 'nope' }}

      - run: pnpm run build

      - id: check-release
        run: |
          if [[ $(node ./scripts/check-is-release.js 2> /dev/null || :) = v* ]];
            then
              echo "IS_RELEASE=true" >> $GITHUB_OUTPUT
            else
              echo "IS_RELEASE=false" >> $GITHUB_OUTPUT
          fi
      # We use week in the turbo cache key to keep the cache from infinitely growing
      - id: get-week
        run: echo "WEEK=$(date +%U)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        timeout-minutes: 5
        id: cache-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true

      - run: npm i -g pnpm@${PNPM_VERSION}

      - uses: actions/cache@v3
        timeout-minutes: 5
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}
      - run: ./scripts/check-manifests.js

      - run: pnpm lint
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - run: pnpm lint-no-typescript
        if: ${{needs.build.outputs.docsChange != 'nope'}}

  checkPrecompiled:
    name: Check Pre-compiled
    runs-on: ubuntu-latest
    needs: build
    env:
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        with:
          node-version: 16
          check-latest: true

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/checkout@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - run: mv .git .git-bak
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: npm i -g pnpm@${PNPM_VERSION}

      - run: rm -rf .git && mv .git-bak .git
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - run: ./scripts/check-pre-compiled.sh
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - uses: EndBug/add-and-commit@v7
        if: ${{ failure() }}
        with:
          add: 'packages/next/compiled packages/next/bundles --force'
          message: 'âš™ Update compiled files'

  testUnit:
    name: Test Unit
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 10
    env:
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        with:
          node-version: 16
          check-latest: true

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: npm i -g pnpm@${PNPM_VERSION}
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - run: node run-tests.js --type unit
        if: ${{needs.build.outputs.docsChange == 'nope'}}

  # run LTS matrix always and maintenance tests during a release
  testDevLTS:
    name: Test Development Node.js LTS
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 35
    env:
      NEXT_TELEMETRY_DISABLED: 1
      TEST_TIMINGS_TOKEN: ${{ secrets.TEST_TIMINGS_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        node: [18]
        group: [1, 2, 3, 4, 5]
    steps:
      - run: echo "${{needs.build.outputs.docsChange}}"

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v${{ matrix.node }} | FORCE=1 bash && node -v && npm i -g pnpm@${PNPM_VERSION} > /dev/null && NEXT_TEST_JOB=1 NEXT_TEST_MODE=dev TEST_TIMINGS_TOKEN=${{ secrets.TEST_TIMINGS_TOKEN }} xvfb-run node run-tests.js --type development --timings -g ${{ matrix.group }}/5 >> /proc/1/fd/1"
        name: Run test/development
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - name: Upload test trace
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-trace
          if-no-files-found: ignore
          retention-days: 2
          path: |
            test/traces

  testDevMaintenance:
    name: Test Development Node.js Maintenance
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 35
    env:
      NEXT_TELEMETRY_DISABLED: 1
      TEST_TIMINGS_TOKEN: ${{ secrets.TEST_TIMINGS_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        node: [16]
        group: [1, 2, 3, 4, 5]
    # we can't use "matrix" context in job level "if" so we have
    # to create a separate job which can skip
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    steps:
      - run: echo "${{needs.build.outputs.docsChange}}"

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v${{ matrix.node }} | FORCE=1 bash && node -v && npm i -g pnpm@${PNPM_VERSION} > /dev/null && NEXT_TEST_JOB=1 NEXT_TEST_MODE=dev TEST_TIMINGS_TOKEN=${{ secrets.TEST_TIMINGS_TOKEN }} xvfb-run node run-tests.js --type e2e --timings -g ${{ matrix.group }}/7 >> /proc/1/fd/1"
        name: Run test/e2e (dev)
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - name: Upload test trace
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-trace
          if-no-files-found: ignore
          retention-days: 2
          path: |
            test/traces

  testDevE2ELTS:
    name: Test Development (E2E) Node.js LTS
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 35
    env:
      NEXT_TELEMETRY_DISABLED: 1
      TEST_TIMINGS_TOKEN: ${{ secrets.TEST_TIMINGS_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        node: [18]
        group: [1, 2, 3, 4, 5, 6, 7, 8]
    steps:
      - run: echo "${{needs.build.outputs.docsChange}}"

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - uses: actions/download-artifact@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        with:
          name: next-swc-test-binary
          path: packages/next-swc/native

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v${{ matrix.node }} | FORCE=1 bash && node -v && npm i -g pnpm@${PNPM_VERSION} > /dev/null && NEXT_TEST_JOB=1 NEXT_TEST_MODE=dev TEST_TIMINGS_TOKEN=${{ secrets.TEST_TIMINGS_TOKEN }} xvfb-run node run-tests.js --type e2e --timings -g ${{ matrix.group }}/8 >> /proc/1/fd/1"
        name: Run test/e2e (dev)
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - name: Upload test trace
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-trace
          if-no-files-found: ignore
          retention-days: 2
          path: |
            test/traces

  testDevE2EMaintenance:
    name: Test Development (E2E) Node.js Maintenance
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 35
    env:
      NEXT_TELEMETRY_DISABLED: 1
      TEST_TIMINGS_TOKEN: ${{ secrets.TEST_TIMINGS_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        node: [16]
        group: [1, 2, 3, 4, 5, 6, 7, 8]
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    steps:
      - run: echo "${{needs.build.outputs.docsChange}}"

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - uses: actions/download-artifact@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        with:
          name: next-swc-test-binary
          path: packages/next-swc/native

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v${{ matrix.node }} | FORCE=1 bash && node -v && npm i -g pnpm@${PNPM_VERSION} > /dev/null && NEXT_TEST_JOB=1 NEXT_TEST_MODE=dev TEST_TIMINGS_TOKEN=${{ secrets.TEST_TIMINGS_TOKEN }} xvfb-run node run-tests.js --type e2e --timings -g ${{ matrix.group }}/8 >> /proc/1/fd/1"
        name: Run test/e2e (dev)
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - name: Upload test trace
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-trace
          if-no-files-found: ignore
          retention-days: 2
          path: |
            test/traces

  testProdLTS:
    name: Test Production Node.js LTS
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 15
    env:
      NEXT_TELEMETRY_DISABLED: 1
      TEST_TIMINGS_TOKEN: ${{ secrets.TEST_TIMINGS_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        node: [18]
        group: [1, 2, 3, 4, 5]
    steps:
      - run: echo "${{needs.build.outputs.docsChange}}"

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v${{ matrix.node }} | FORCE=1 bash && node -v && npm i -g pnpm@${PNPM_VERSION} > /dev/null && NEXT_TEST_JOB=1 NEXT_TEST_MODE=start TEST_TIMINGS_TOKEN=${{ secrets.TEST_TIMINGS_TOKEN }} xvfb-run node run-tests.js --type production --timings -g ${{ matrix.group }}/3 >> /proc/1/fd/1"
        name: Run test/production
        if: ${{needs.build.outputs.docsChange == 'nope'}}

  testProdMaintenance:
    name: Test Production Node.js Maintenance
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 15
    env:
      NEXT_TELEMETRY_DISABLED: 1
      TEST_TIMINGS_TOKEN: ${{ secrets.TEST_TIMINGS_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        node: [16]
        group: [1, 2, 3, 4, 5]
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    steps:
      - run: echo "${{needs.build.outputs.docsChange}}"

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - uses: actions/download-artifact@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        with:
          name: next-swc-test-binary
          path: packages/next-swc/native

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v${{ matrix.node }} | FORCE=1 bash && node -v && npm i -g pnpm@${PNPM_VERSION} > /dev/null && NEXT_TEST_JOB=1 NEXT_TEST_MODE=start TEST_TIMINGS_TOKEN=${{ secrets.TEST_TIMINGS_TOKEN }} xvfb-run node run-tests.js --type production --timings -g ${{ matrix.group }}/5 >> /proc/1/fd/1"
        name: Run test/production
        if: ${{needs.build.outputs.docsChange == 'nope'}}

  testProdE2ELTS:
    name: Test Production (E2E) Node.js LTS
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 35
    env:
      NEXT_TELEMETRY_DISABLED: 1
      TEST_TIMINGS_TOKEN: ${{ secrets.TEST_TIMINGS_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        node: [18]
        group: [1, 2, 3, 4, 5, 6, 7, 8]
    steps:
      - run: echo "${{needs.build.outputs.docsChange}}"

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v${{ matrix.node }} | FORCE=1 bash && node -v && npm i -g pnpm@${PNPM_VERSION} > /dev/null && NEXT_TEST_JOB=1 NEXT_TEST_MODE=start TEST_TIMINGS_TOKEN=${{ secrets.TEST_TIMINGS_TOKEN }} xvfb-run node run-tests.js --type e2e --timings -g ${{ matrix.group }}/7 >> /proc/1/fd/1"
        name: Run test/e2e (production)
        if: ${{needs.build.outputs.docsChange == 'nope'}}

  testProdE2EMaintenance:
    name: Test Production (E2E) Node.js Maintenance
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 35
    env:
      NEXT_TELEMETRY_DISABLED: 1
      TEST_TIMINGS_TOKEN: ${{ secrets.TEST_TIMINGS_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        node: [16]
        group: [1, 2, 3, 4, 5, 6, 7, 8]
    # run LTS matrix always and maintenance tests during a release
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    steps:
      - run: echo "${{needs.build.outputs.docsChange}}"

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - uses: actions/download-artifact@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        with:
          name: next-swc-test-binary
          path: packages/next-swc/native

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v${{ matrix.node }} | FORCE=1 bash && node -v && npm i -g pnpm@${PNPM_VERSION} > /dev/null && NEXT_TEST_JOB=1 NEXT_TEST_MODE=start TEST_TIMINGS_TOKEN=${{ secrets.TEST_TIMINGS_TOKEN }} xvfb-run node run-tests.js --type e2e --timings -g ${{ matrix.group }}/8 >> /proc/1/fd/1"
        name: Run test/e2e (production)
        if: ${{needs.build.outputs.docsChange == 'nope'}}

  testCNA:
    name: Test Create Next App
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 35
    env:
      NEXT_TELEMETRY_DISABLED: 1
      TEST_TIMINGS_TOKEN: ${{ secrets.TEST_TIMINGS_TOKEN }}
    steps:
      - run: echo "${{needs.build.outputs.docsChange}}"

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{ needs.build.outputs.docsChange == 'nope' }}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: echo "CNA_CHANGE<<EOF" >> $GITHUB_OUTPUT; echo "$(node scripts/run-for-change.js --type cna --always-canary --exec echo 'yup')" >> $GITHUB_OUTPUT; echo "EOF" >> $GITHUB_OUTPUT
        id: cna-change

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v${{ env.NODE_LTS_VERSION }} | FORCE=1 bash && npm i -g pnpm@${PNPM_VERSION} > /dev/null && NEXT_TEST_JOB=1 NEXT_TEST_CNA=1 xvfb-run node run-tests.js test/integration/create-next-app/index.test.ts test/integration/create-next-app/templates.test.ts >> /proc/1/fd/1"
        if: ${{ needs.build.outputs.docsChange == 'nope' && steps.cna-change.outputs.CNA_CHANGE == 'yup' }}

      - name: Upload test trace
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-trace
          if-no-files-found: ignore
          retention-days: 2
          path: |
            test/traces

  testCodemods:
    name: Test Codemods
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 5
    env:
      NEXT_TELEMETRY_DISABLED: 1
      TEST_TIMINGS_TOKEN: ${{ secrets.TEST_TIMINGS_TOKEN }}

    steps:
      - run: echo "${{needs.build.outputs.docsChange}}"

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{ needs.build.outputs.docsChange == 'nope' }}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: echo "CODEMOD_CHANGE<<EOF" >> $GITHUB_OUTPUT; echo "$(node scripts/run-for-change.js --type next-codemod --always-canary --exec echo 'yup')" >> $GITHUB_OUTPUT; echo "EOF" >> $GITHUB_OUTPUT
        id: codemodChange

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v${{ env.NODE_LTS_VERSION }} | FORCE=1 bash && npm i -g pnpm@${PNPM_VERSION} > /dev/null && cd ./packages/next-codemod && pnpm build && pnpm test >> /proc/1/fd/1"
        if: ${{ needs.build.outputs.docsChange == 'nope' && steps.codemodChange.outputs.CODEMOD_CHANGE == 'yup' }}

  testIntegration:
    name: Test Integration
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 35
    env:
      NEXT_TELEMETRY_DISABLED: 1
      TEST_TIMINGS_TOKEN: ${{ secrets.TEST_TIMINGS_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        group:
          [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
          ]
    steps:
      - run: echo "${{needs.build.outputs.docsChange}}"

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v16 | FORCE=1 bash && npm i -g pnpm@${PNPM_VERSION} > /dev/null && NEXT_TEST_JOB=1 TEST_TIMINGS_TOKEN=${{ secrets.TEST_TIMINGS_TOKEN }} xvfb-run node run-tests.js --timings -g ${{ matrix.group }}/25 >> /proc/1/fd/1"
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - name: Upload test trace
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-trace
          if-no-files-found: ignore
          retention-days: 2
          path: |
            test/traces

  testElectron:
    name: Test Electron
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 10
    env:
      NEXT_TELEMETRY_DISABLED: 1
      TEST_ELECTRON: 1
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        with:
          node-version: 16
          check-latest: true

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: npm i -g pnpm@${PNPM_VERSION}
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - run: cd test/integration/with-electron/app && yarn install
        if: ${{needs.build.outputs.docsChange == 'nope'}}

      - run: xvfb-run node run-tests.js test/integration/with-electron/test/index.test.js
        if: ${{needs.build.outputs.docsChange == 'nope'}}

  testsPass:
    name: thank you, next
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        check-examples,
        checkPrecompiled,
        testIntegration,
        testUnit,
        testDevLTS,
        testProdLTS,
        testDevE2ELTS,
        testprode2elts,
      ]
    steps:
      - run: exit 0

  testFirefox:
    name: Test Firefox (production)
    runs-on: ubuntu-20.04
    needs: [build]
    timeout-minutes: 10
    env:
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v16 | FORCE=1 bash && npm i -g pnpm@${PNPM_VERSION} > /dev/null && BROWSERNAME=firefox NEXT_TEST_JOB=1 TEST_TIMINGS_TOKEN=${{ secrets.TEST_TIMINGS_TOKEN }} xvfb-run node run-tests.js test/integration/production/test/index.test.js >> /proc/1/fd/1"
        if: ${{needs.build.outputs.docsChange == 'nope'}}

  testSafari:
    name: Test Safari (production)
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 15
    env:
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v{{ env.NODE_LTS_VERSION }} | FORCE=1 bash && npm i -g pnpm@${PNPM_VERSION} > /dev/null && NEXT_TEST_JOB=1 NEXT_TEST_MODE=start BROWSER_NAME=safari node run-tests.js -c 1 test/integration/production/test/index.test.js test/e2e/basepath.test.ts && DEVICE_NAME='iPhone XR' node run-tests.js -c 1 test/production/prerender-prefetch/index.test.ts  >> /proc/1/fd/1"
        if: ${{needs.build.outputs.docsChange == 'nope'}}

  testFirefoxNodeLTS:
    name: Test Firefox Node.js LTS
    runs-on: ubuntu-latest
    needs: [build, testFirefox]
    timeout-minutes: 10
    env:
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - uses: actions/cache@v3
        timeout-minutes: 5
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v${{ env.NODE_LTS_VERSION }} | FORCE=1 bash && node -v && npm i -g pnpm@${PNPM_VERSION} > /dev/null && BROWSER_NAME=firefox NEXT_TEST_JOB=1 TEST_TIMINGS_TOKEN=${{ secrets.TEST_TIMINGS_TOKEN }} xvfb-run node run-tests.js test/integration/production/test/index.test.js >> /proc/1/fd/1"
        if: ${{needs.build.outputs.docsChange == 'nope'}}

  publishRelease:
    if: ${{ needs.build.outputs.isRelease == 'true' }}
    name: Potentially publish release
    runs-on: ubuntu-latest
    needs:
      - build
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN_ELEVATED }}
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        with:
          node-version: 16
          check-latest: true

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/cache@v3
        timeout-minutes: 5
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: npm i -g pnpm@${PNPM_VERSION}
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run: ./scripts/publish-release.js

  testDeployE2E:
    name: E2E (deploy)
    runs-on: ubuntu-latest
    needs: [publishRelease, build]
    env:
      NEXT_TELEMETRY_DISABLED: 1
      VERCEL_TEST_TOKEN: ${{ secrets.VERCEL_TEST_TOKEN }}
      VERCEL_TEST_TEAM: vtest314-next-e2e-tests
    steps:
      - uses: actions/cache@v3
        timeout-minutes: 5
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: RESET_VC_PROJECT=true node scripts/reset-vercel-project.mjs
        name: Reset test project

      - run: docker run --rm -v $(pwd):/work mcr.microsoft.com/playwright:v1.28.1-focal /bin/bash -c "cd /work && curl -s https://install-node.vercel.app/v${{ env.NODE_LTS_VERSION }} | FORCE=1 bash && npm i -g pnpm@${PNPM_VERSION} > /dev/null && VERCEL_TEST_TOKEN=${{ secrets.VERCEL_TEST_TOKEN }} VERCEL_TEST_TEAM=vtest314-next-e2e-tests NEXT_TEST_JOB=1 NEXT_TEST_MODE=deploy TEST_TIMINGS_TOKEN=${{ secrets.TEST_TIMINGS_TOKEN }} xvfb-run node run-tests.js --type e2e >> /proc/1/fd/1"
        name: Run test/e2e (deploy)

      - name: Upload test trace
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-trace
          if-no-files-found: ignore
          retention-days: 2
          path: |
            test/traces

  releaseStats:
    name: Release Stats
    runs-on: ubuntu-latest
    needs: [publishRelease]
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true

      - uses: actions/cache@v3
        timeout-minutes: 5
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - run: ./scripts/release-stats.sh
      - uses: ./.github/actions/next-stats-action
        env:
          PR_STATS_COMMENT_TOKEN: ${{ secrets.PR_STATS_COMMENT_TOKEN }}

  check-trace-secrests:
    runs-on: ubuntu-latest
    outputs:
      trace-api-key: ${{ steps.trace-api-key.outputs.defined }}
    steps:
      - id: trace-api-key
        env:
          TRACE_API_KEY: ${{ secrets.DATA_DOG_API_KEY }}
        if: "${{ env.TRACE_API_KEY != '' }}"
        run: echo "defined=true" >> $GITHUB_OUTPUT

  build-performance-metrics:
    name: Performance Metrics for Release Build
    runs-on: ubuntu-latest
    needs: [build, check-trace-secrests]
    if: needs.check-trace-secrests.outputs.trace-api-key == 'true'
    env:
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        with:
          node-version: 16
          check-latest: true

      - uses: actions/cache@v3
        timeout-minutes: 5
        id: restore-build
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        with:
          path: ./*
          key: ${{ github.sha }}-${{ github.run_number }}

      - name: Set Git Short sha Env
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        run: echo "GIT_SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

      - name: Check Git Short sha Env
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        run: echo ${GIT_SHORT_SHA}

      - name: Generate metrics data
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        run: |
          yarn --cwd bench/nested-deps install
          node bench/nested-deps/bench.mjs build
      - uses: datadog/agent-github-action@v1
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        with:
          api_key: ${{ secrets.DATA_DOG_API_KEY }}
      - name: Sending metrics data to Datadog
        if: ${{needs.build.outputs.docsChange == 'nope'}}
        run: |
          node scripts/trace-dd.mjs bench/nested-deps/.next/trace build ${GIT_SHORT_SHA} ./bench/nested-deps/next.config.js
        env:
          DATA_DOG_API_KEY: ${{ secrets.DATA_DOG_API_KEY }}
          DD_TRACE_PARTIAL_FLUSH_MIN_SPANS: 10
          DD_ENV: canary
          DD_SERVICE: nextjs-dev-build
          DD_TRACE_DEBUG: true
