#!/usr/bin/env node
import { resolve, join } from 'path'
import { existsSync } from 'fs'
import parseArgs from 'minimist'
import Build from '../server/build'
import Export from '../server/export'
import { printAndExit } from '../lib/utils'

process.env.NODE_ENV = process.env.NODE_ENV || 'production'

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help',
    r: 'root'
  },
  boolean: ['h']
})

if (argv.help) {
  console.log(`
    Description
      Compiles and exports the application to a static website

    Usage
      $ next export <dir>
      $ next export --root <root> <dir>

    <dir> represents where the static directory will go.
    If no directory is provided, <dir> will be <root>/build.

    <root> represents where the compiled <dir> folder should go.
    If no directory is provided, .next will be created in the current directory.
  `)
  process.exit(0)
}

const root = resolve(argv['root'] || '.')
const dir = resolve(root, argv._[0] || 'build')

// Check if pages dir exists and warn if not
if (!existsSync(root)) {
  printAndExit(`> No such directory exists as the project root: ${root}`)
}

if (!existsSync(join(root, 'pages'))) {
  if (existsSync(join(root, '..', 'pages'))) {
    printAndExit('> No `pages` directory found. Did you mean to run `next` in the parent (`../`) directory?')
  }

  printAndExit('> Couldn\'t find a `pages` directory. Please create one under the project root')
}

Build(root)
.then(() => Export({ dir, root }))
.catch((err) => {
  console.error(err)
  process.exit(1)
})
