#!/usr/bin/env node

import { resolve, join } from 'path'
import parseArgs from 'minimist'
import Server from '../server'
import {exists} from 'mz/fs'
import { spawn } from 'cross-spawn'

const argv = parseArgs(process.argv.slice(2), {
  alias: {
    h: 'help',
    p: 'port'
  },
  boolean: ['h'],
  default: {
    p: 3000
  }
})

if (argv.help) {
  console.log(`
    Description
      Starts the application in production mode.
      The application should be compiled with \`next build\` first.

    Usage
      $ next start <dir> -p <port>

    <dir> is the directory that contains the compiled .next folder
    created by running \`next build\`.
    If no directory is provided, the current directory will be assumed.

    Options
      --port, -p      A port number on which to start the application
      --help, -p      Displays this message
  `)
  process.exit(0)
}

const dir = resolve(argv._[0] || '.')

const srv = new Server({ dir })

exists(resolve(dir, '.next')).then(exists => {
  if (!exists) {
    console.log(`> Running \`next build\` first...`)
    return spawn.sync(join(__dirname, 'next-build'), { stdio: 'inherit', customFds: [0, 1, 2] })
  }
})
.then(() => {
  srv.start(argv.port)
})
.then(() => {
  if (!process.env.NOW) {
    console.log(`> Ready on http://localhost:${argv.port}`)
  }
})
.catch((err) => {
  console.error(err)
  process.exit(1)
})

