import type { GetServerSideProps } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import React, { ChangeEvent, useEffect, useRef, useState } from 'react'
import styled from 'styled-components'
import Card from '../components/Card'
import { VideoUploader, VideoUploadResponse } from '@api.video/video-uploader'
import Status from '../components/Status'
import { useRouter } from 'next/router'

const fetcher = async (url: string): Promise<any> => {
  return fetch(url).then(res => res.json())
}

interface IHomeProps {
  uploadToken: { token: string }
}

const Home: React.FC<IHomeProps> = (
  uploadToken
) => {
  const [uploadProgress, setUploadProgress] = useState<number | undefined>(undefined)
  const [video, setVideo] = useState<VideoUploadResponse | undefined>(undefined)
  const [ready, setReady] = useState<boolean>(false)
  const [status, setStatus] = useState<{ ingested: boolean, encoded: boolean }>({ ingested: false, encoded: false })
  const [interId, setInterId] = useState<number | undefined>(undefined)
  const [size, setSize] = useState<{ width: number, height: number } | undefined>(undefined)
  const inputRef = useRef<HTMLInputElement>(null)
  const { uploadToken: { token } } = uploadToken
  const router = useRouter()

  useEffect(() => {
    if (video) {
      const intervalId = window.setInterval(() => {
        fetchVideoStatus(video.videoId)
      }, 1000)
      setInterId(intervalId)
    }
  }, [video, ready])
  useEffect(() => {
    ready && window.clearInterval(interId)
  }, [interId, ready])

  const handleSelectFile = async (e: ChangeEvent<HTMLInputElement>): Promise<void> => {
    e.preventDefault()
    clearState()
    if (!e.target.files || !token) return
    const file = e.target.files[0]
    const uploader = new VideoUploader({
      file,
      uploadToken: token
    })
    uploader.onProgress(e => setUploadProgress(Math.round(e.uploadedBytes * 100 / e.totalBytes)))
    const video = await uploader.upload()
    setVideo(video)
  }

  const fetchVideoStatus = async (videoId: string): Promise<void> => {
    const { status } = await fetcher(`/api/${videoId}`)
    const { encoding, ingest } = status
    setStatus({ ingested: ingest.status === 'uploaded', encoded: encoding.playable })
    if (ingest.status === 'uploaded' && encoding.playable) {
      setSize({ width: encoding.metadata.width, height: encoding.metadata.height })
      setReady(true)
    }
  }

  const clearState = (): void => {
    setReady(false)
    setStatus({ ingested: false, encoded: false })
    setVideo(undefined)
    setUploadProgress(undefined)
    setSize(undefined)
  }

  return (
    <GlobalContainer>
      <Head>
        <title>Video Uploader</title>
        <meta name="description" content="Generated by create next app & created by api.video" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header>
        <span>api.video uploader</span> üöÄ
      </Header>

      <main>
        <TextsContainer>
          <Text>
            Hey fellow dev! üëã <br />Welcome to this basic example of video uploader provided by <a href="https://api.video" target="_blank">api.video</a> and powered by <a href="https://nextjs.org/" target="_blank">Vercel & Next.js</a>.
          </Text>
          <Text>
            api.video provides APIs and clients to handle all your video needs.
            <br/>
            This app is built with the <a href="https://github.com/apivideo/api.video-nodejs-client" target="_blank">api.video Node.js client</a> and the <a href="https://github.com/apivideo/api.video-typescript-uploader" target="_blank">Typescript uploader</a>.
          </Text>
          <Text>
            Please add a video to upload and let the power of the API do the rest üé©
          </Text>
        </TextsContainer>

        <Button
          $upload
          onClick={() => inputRef.current?.click()}
        >
          Select a file
        </Button>
        <input ref={inputRef} hidden type="file" accept="mp4" onChange={handleSelectFile} />

        {uploadProgress && (
          <>
            <StatusContainer>
              <Status title="Uploaded" done={uploadProgress >= 100} />
              <span />
              <Status title="Ingested" done={status.ingested} />
              <span />
              <Status title="Playable" done={status.encoded} />
            </StatusContainer>
            <Card 
              content="https://ws.api.video/videos/{videoId}/source" 
              url="https://docs.api.video/reference/post_videos-videoid-source" 
              method="post"
            />
          </>
        )}

        {(ready && video) && (
          <Button onClick={() => router.push(`/${video.videoId}`)}>
            Watch it üçø
          </Button>
        )}
      </main>

      <Footer>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
        <span>and</span>
        <a href='https://api.video'
          target="_blank"
          rel="noopener noreferrer"
        >
          api.video
        </a>
      </Footer>
    </GlobalContainer>
  )
}

export default Home

export const getServerSideProps: GetServerSideProps = async () => {
  const uploadToken = await fetch('http://localhost:3000/api/uploadToken').then(res => res.json())
  return { props : uploadToken }
}

export const GlobalContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100vw;
  gap: 20px;
  margin-top: 2rem;
  main {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
  }
`

export const Header = styled.header`
  font-size: 2.5rem;
  span {
    font-weight: 700;
    background: -webkit-linear-gradient(45deg, rgb(250, 91, 48) 0%, rgb(128, 54, 255) 26.88%, rgb(213, 63, 255) 50.44%, rgb(235, 137, 82) 73.83%, rgb(247, 181, 0) 100%);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
  }
`

const TextsContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 20px;
  padding: 3rem 5rem;
  box-shadow: rgb(0 0 0 / 10%) 0px 2px 4px;
  border-radius: 5px;
`

const Text = styled.p`
  text-align: center;
  font-size: 1.1rem;
  letter-spacing: .03rem;
  a {
    font-weight: 700;
  }
`

const Button = styled.button<{ $upload?: boolean }>`
  background: ${p => p.$upload 
    ? '-webkit-linear-gradient(45deg, rgb(250, 91, 48) 0%, rgb(235, 137, 82) 50%, rgb(247, 181, 0) 100%)' 
    : '-webkit-linear-gradient(45deg, rgb(247, 181, 0) 0%, rgb(235, 137, 82) 50%, rgb(250, 91, 48) 100%)'};
  border: none;
  padding: .8rem 1.2rem;
  border-radius: 5px;
  color: #FFFFFF;
  cursor: pointer;
  font-size: 1.2rem;
  font-weight: 500;
`

const StatusContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 2rem;
  span {
    width: 35px;
    height: 5px;
    border-radius: 5px;
    background-color: rgb(235, 137, 82);
    margin-top: 20px;
  }
`

const Footer = styled.footer`
  position: fixed;
  bottom: 30px;
  display: flex;
  align-items: center;
  gap: 5px;
  a:nth-of-type(2) {
    font-weight: 600;
    font-size: 1.1rem;
  }
`
