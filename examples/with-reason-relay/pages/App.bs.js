// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Query = require("../src/Query.bs.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var $$Promise = require("reason-promise/src/js/promise.js");
var BlogPosts = require("../src/components/BlogPosts.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonRelay = require("reason-relay/src/ReasonRelay.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function inject(_cls, _fn) {
  return (_cls.getInitialProps = _fn);
}

var Next = {
  inject: inject
};

var Graphql_error = Caml_exceptions.create("App.Graphql_error");

function fetchQuery(operation, variables, _cacheConfig) {
  var uri = process.env.RELAY_ENDPOINT;
  return fetch(uri, Fetch.RequestInit.make(/* Post */2, {
                      "content-type": "application/json",
                      accept: "application/json"
                    }, Caml_option.some(JSON.stringify(Js_dict.fromList(/* :: */[
                                  /* tuple */[
                                    "query",
                                    operation.text
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      "variables",
                                      variables
                                    ],
                                    /* [] */0
                                  ]
                                ]))), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0)).then((function (resp) {
                if (resp.ok) {
                  return resp.json();
                } else {
                  return Promise.reject([
                              Graphql_error,
                              "Request failed: " + resp.statusText
                            ]);
                }
              }));
}

function createEnvironment(records, param) {
  var source = ReasonRelay.RecordSource.make(records, /* () */0);
  var store = ReasonRelay.Store.make(source, undefined, /* () */0);
  var network = ReasonRelay.Network.makePromiseBased(fetchQuery, undefined, /* () */0);
  return ReasonRelay.Environment.make(network, store, undefined, undefined, /* () */0);
}

function App(Props) {
  var viewer = Props.viewer;
  var records = Props.records;
  console.log("render viewer", viewer);
  console.log("render records", records);
  return React.createElement(ReasonRelay.Context.Provider.make, Curry._4(ReasonRelay.Context.Provider.makeProps, createEnvironment(Caml_option.some(records), /* () */0), React.createElement("div", undefined, React.createElement(BlogPosts.make, {
                          viewer: Curry._1(viewer.getFragmentRefs, /* () */0)
                        })), undefined, /* () */0));
}

function getInitialPropsRe(_context) {
  var environment = createEnvironment(undefined, /* () */0);
  var promise = Curry._2(Query.Viewer.fetchPromised, environment, /* () */0);
  var records = ReasonRelay.RecordSource.toJSON(ReasonRelay.Store.getSource(ReasonRelay.Environment.getStore(environment)));
  return $$Promise.Js.toBsPromise($$Promise.mapOk(promise, (function (p) {
                    console.log("getInitialProps viewer", p);
                    console.log("getInitialProps records", records);
                    return {
                            props: {
                              viewer: p.viewer,
                              records: records
                            }
                          };
                  })));
}

var getInitialProps = (async function () {
    return await getInitialPropsRe();
  });

inject(App, getInitialProps);

var make = App;

var $$default = App;

exports.Next = Next;
exports.Graphql_error = Graphql_error;
exports.fetchQuery = fetchQuery;
exports.createEnvironment = createEnvironment;
exports.make = make;
exports.getInitialPropsRe = getInitialPropsRe;
exports.getInitialProps = getInitialProps;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/* getInitialProps Not a pure module */
